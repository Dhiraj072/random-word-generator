buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
}

plugins {
	id 'com.github.kt3k.coveralls' version '2.8.2'
}

repositories {
	mavenCentral()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'java-library'

group = 'com.github.dhiraj072'
version = '1.1.0'
sourceCompatibility = 1.8
ext.artifactId = 'random-word-generator'
ext.timestamp = new Date().format("yyyyMMdd'_'HHmmss", TimeZone.default)
ext.versionDesc = "${version}-${timestamp}"
ext.defaultEncoding = 'UTF-8'

//// CONFIG FOR UNIT AND INTEGRATION TESTS - START ////
sourceSets {
	//Declaring this source set creates compile time and runtime configurations for it.
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}
}

// Configure source directory and uses the correct classpath.
task integrationTest(type: Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	// Ensure that integration tests are run every time
	outputs.upToDateWhen { false }
}

//Ensure that the check task fails the build if there are failing integration tests.
check.dependsOn integrationTest
//Ensure that our unit tests are run before our integration tests
integrationTest.mustRunAfter test

//Configures the compile and runtime configurations for our integration tests
//and includes the dependencies of the test task.
configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

// Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
	reports.html.setDestination(file("${reporting.baseDir}/${name}"))
	// Enable JUnit 5
	useJUnitPlatform()
	testLogging {
		events 'PASSED', 'FAILED', 'SKIPPED'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "\nTest result: ${result.resultType}"
			println "Test summary: ${result.testCount} tests, " +
					"${result.successfulTestCount} succeeded, " +
					"${result.failedTestCount} failed, " +
					"${result.skippedTestCount} skipped"
		}
	}
}

jacocoTestReport {
	executionData test, integrationTest
	reports {
		xml.enabled true
		xml.destination file('build/reports/jacoco/report.xml')
		html.enabled true
		html.destination file('build/reports/jacoco/report.html')
	}
}

coveralls {
	jacocoReportPath 'build/reports/jacoco/report.xml'
}

check.dependsOn jacocoTestReport
//// CONFIG FOR UNIT AND INTEGRATION TESTS - END ////

dependencies {
	compile 'org.asynchttpclient:async-http-client:2.2.0'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.4.6'
	testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
	testCompile 'com.github.stefanbirkner:system-rules:1.17.2'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

//// CONFIG FOR MAVEN PUBLISHING - START ////
task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}
task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

jar {
	enabled = true
	manifest {
		attributes('Implementation-Title': project.name,
				'Implementation-Version': project.version)
	}
}

publishing {
	repositories {
		maven {
			name 'mavenSnapshot'
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
			credentials {
				username = ossrhUsername
				password = ossrhPassword
			}
		}
		maven {
			name 'mavenRelease'
			url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
			credentials {
				username = ossrhUsername
				password = ossrhPassword
			}
		}
	}
	publications {
		randomWordGenerator(MavenPublication) {
			artifact(javadocJar)
			artifact(sourcesJar)
			groupId = "${group}"
			artifactId = "${artifactId}"
			version = "${version}"
			from components.java
			pom {
				name = 'Random Word Generator'
				description = 'A java library to generate random words'
				url = 'https://github.com/Dhiraj072/random-word-generator'
				licenses {
					license {
						name = 'MIT License'
						url = 'https://opensource.org/licenses/MIT'
					}
				}
				developers {
					developer {
						id = 'dhiraj072'
						name = 'Dhiraj Bhatt'
						email = 'dhirajbhatt072@gmail.com'
					}
				}
				scm {
					connection = 'scm:git:https://github.com/Dhiraj072/random-word-generator.git'
					developerConnection = 'scm:git:https://github.com/Dhiraj072/random-word-generator.git'
					url = 'https://github.com/Dhiraj072/random-word-generator'
				}
			}
		}
	}
}

signing {
	sign publishing.publications.randomWordGenerator
}
//// CONFIG FOR MAVEN PUBLISHING - END ////
