buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
	}
}

plugins {
	id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jp.classmethod.aws.beanstalk"
apply plugin: 'jacoco'

group = 'com.github.dhiraj072.randomwordgenerator'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
ext.artifactId = 'random-word-generator'
ext.timestamp = new Date().format("yyyyMMdd'_'HHmmss", TimeZone.default)
ext.versionDesc = "${version}-${timestamp}"
ext.defaultEncoding = 'UTF-8'

// Configures the classpath and the source and resource directories
// of the integrationTest task.
sourceSets {
	//Declaring this source set creates compile time and runtime configurations for it.
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}
}

// Configure source directory and uses the correct classpath.
task integrationTest(type: Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	// Ensure that integration tests are run every time
	outputs.upToDateWhen { false }
}

//Ensure that the check task fails the build if there are failing integration tests.
check.dependsOn integrationTest
//Ensure that our unit tests are run before our integration tests
integrationTest.mustRunAfter test

//Configures the compile and runtime configurations for our integration tests
//and includes the dependencies of the test task.
configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

repositories {
	mavenCentral()
}

// Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
	reports.html.setDestination(file("${reporting.baseDir}/${name}"))
	environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "dev"
	// Enable JUnit 5
	useJUnitPlatform()
	testLogging {
		events 'PASSED', 'FAILED', 'SKIPPED'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "\nTest result: ${result.resultType}"
			println "Test summary: ${result.testCount} tests, " +
					"${result.successfulTestCount} succeeded, " +
					"${result.failedTestCount} failed, " +
					"${result.skippedTestCount} skipped"
		}
	}
}

jacocoTestReport {
	executionData test, integrationTest
	reports {
		xml.enabled true
		xml.destination file('build/reports/jacoco/report.xml')
		html.enabled true
		html.destination file('build/reports/jacoco/report.html')
	}
}
coveralls {
	jacocoReportPath 'build/reports/jacoco/report.xml'
}
check.dependsOn jacocoTestReport

bootRun {
	environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "staging"
}

ext {
	springCloudVersion = 'Finchley.SR1'
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile group: 'org.springframework.data', name: 'spring-data-rest-hal-browser', version: '3.0.8.RELEASE'
	compile 'org.asynchttpclient:async-http-client:2.2.0'
	runtime 'com.h2database:h2'
	testCompile 'io.rest-assured:rest-assured:3.0.0'
	testCompile 'io.rest-assured:json-schema-validator:3.0.0'
	testCompile('org.springframework.boot:spring-boot-starter-test') {
		exclude group: "junit"
	}
	testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
	testCompile 'com.github.stefanbirkner:system-rules:1.17.2'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
